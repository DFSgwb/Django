路由配置
    -settings.py中的‘ROOt_URLCONF’指定了主路由的配置列表urlpatterns的文件位置
    -file:<项目同名文件夹下>/urls.py配置格式
        路由是由上到下逐一匹配，先到先得原则
        urlpatterns = [
        path('path/2003/',views.page_2003)
    ]
    path()函数
        -导入方法：import django.urls import path
        -语法：path(route,view,name=None)
            route:字符串路径，匹配的路径
            views:指定路径所对应的视图处理函数的名称
            name:为地址起别名，在模板中地址反向解析中使用
    path转换器
        语法：<转换器类型:自定义名称>
        作用:若转换器类型匹配到对应类型的数据，则将数据按照关键字传参的方式传递给视图函数
            转换器类型：
                str：匹配除了‘/’之外的非空字符串
                    样例："v1/users/<str:username>" 匹配 /v1/user/BFS
                int:匹配0或任何正整数，返回一个int
                    样例："page/<int:page>" 匹配/page/100
                slug:匹配任意由ASCII字母或数字以及连字符和下划线组成的短标签
                    样例：“detail/<slug:sl>” 匹配/detail/this-is-django
                path:匹配非空字段，包括路径分隔符号"/" "v1/users/<path:ph>" 匹配：/v1/goods/a/b/c
        例子：path('page^<int:page>',views.xxx)
        re_path()函数
            在url的匹配过程中可以使用正则表达式进行精准匹配
            语法：re_path(reg,view,name=XXX),正则表达式为命名分组模式(?P<name>pattern)
                匹配提取参数后用关键词传参方式传递给视图函数

请求和响应
    请求：浏览器端通过HTTP协议发送给服务器端的数据
    响应：服务器端接收到请求后做响应的处理后再回复给浏览器端的数据
    请求的方法分类：
        get：请求制定的页面信息，并返回实体主体
        head：类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头
        post：向指定资源提交数据进行处理请求（例如提交表单或上传文件），数据被包含再请求体中，post请求可能会导致新的资源的建立和/或已有资源的修改
        put：从客户端想服务器传输的数据取代指定的文档的内容
        delete：请求服务器删除指定的页面
        connect：http/1.1协议中预留给能够将连接改为管道方式的代理服务器
        options：允许客户端查看服务器的性能
        trace：回显服务器收到的请求，主要用于测试或诊断
    Django中的请求
        (1)请求再Django中实则就是视图函数的第一个参数，即HttpRequest对象
        (2)Django接收到http协议中的请求后，会根据请求数据报文创建HttpRequest对象
        (3)HttpRequest对象通过属性描述了请求的所有相关信息
    方法：
        path_info:URL字符串
        method:字符串，表示HTTP请求方法，常用值有‘get’，‘post’
        GET:QueryDict查询字典的对象，包含get请求方法的所有数据
        POST:QueryDict查询字典的对象，包含post请求方法的所有数据
        files:类似于字典的对象，包含所有的上传文件信息